(self.webpackChunkdrill4j_github_io=self.webpackChunkdrill4j_github_io||[]).push([[8991],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8401:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return o},toc:function(){return s},default:function(){return p}});var r=n(2122),l=n(9756),a=(n(7294),n(3905)),i={id:"drill4net-scanner-parameters",title:"Drill4Net Scanner Parameters"},o={unversionedId:"drill4net/drill4net-scanner-parameters",id:"version-0.8.0/drill4net/drill4net-scanner-parameters",isDocsHomePage:!1,title:"Drill4Net Scanner Parameters",description:"Example",source:"@site/versioned_docs/version-0.8.0/drill4net/drill4net-scanner-parameters.mdx",sourceDirName:"drill4net",slug:"/drill4net/drill4net-scanner-parameters",permalink:"/docs/0.8.0/drill4net/drill4net-scanner-parameters",version:"0.8.0",frontMatter:{id:"drill4net-scanner-parameters",title:"Drill4Net Scanner Parameters"},sidebar:"version-0.8.0/docs",previous:{title:"Project with Tests Setup",permalink:"/docs/0.8.0/drill4net/tests-project-setup"},next:{title:"Chrome Browser Extension",permalink:"/docs/0.8.0/drill4net/chrome-extention"}},s=[{value:"Example",id:"example",children:[]},{value:"Optional Parameters",id:"optional-parameters",children:[]},{value:"Filters",id:"filters",children:[]}],c={toc:s};function p(e){var t=e.components,n=(0,l.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Drill4Net.Scanner.exe <path that contains executable file> --target <path to executable file> --exclude "[myapplication.*]MyApplication.Core.Coverage"\n')),(0,a.kt)("p",null,"Drill4Net allows to explicitly set what must be included using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--include")," option.  "),(0,a.kt)("p",null,"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'--include "[*]*" - Includes all types in all assemblies (everything is instrumented)\n--include "[myapplication.*]MyApplication.Core.Coverage" - Includes the Coverage class in the MyApplication.Core namespace belonging to any assembly that matches "myapplication.*" (e.g "myapplication.core")\n--include "[myapplication.*.tests?]*" - Includes all types in any assembly starting with "myapplication." and ending with ".test" or ".tests" (the ? makes the "s" optional)\n')),(0,a.kt)("p",null,"Both ",(0,a.kt)("inlineCode",{parentName:"p"},"--exclude")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"--include")," options can be used together but ",(0,a.kt)("inlineCode",{parentName:"p"},"--exclude")," takes precedence. You can specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"--exclude")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"--include")," options multiple times to allow for multiple filter expressions.\nYou can also include coverage of the test assembly itself by specifying the ",(0,a.kt)("inlineCode",{parentName:"p"},"--include-test-assembly")," flag."),(0,a.kt)("h2",{id:"optional-parameters"},"Optional Parameters"),(0,a.kt)("p",null,"There are some optional parameters to which you can provide arguments in ",(0,a.kt)("em",{parentName:"p"},"Drill4Net Scanner")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"  --exclude                 Filter expressions to exclude specific modules and types.\n  --include                 Filter expressions to include only specific modules and types.\n  --exclude-by-file         Glob patterns specifying source files to exclude.\n  --include-directory       Include directories containing additional assemblies to be instrumented.\n  --exclude-by-attribute    Attributes to exclude from code coverage.\n  --include-test-assembly   Specifies whether to report code coverage of the test assembly.\n")),(0,a.kt)("p",null,"NB. For multiple value options, you have to specify values multiple times i.e."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--exclude-by-attribute 'Obsolete' --exclude-by-attribute'GeneratedCode' --exclude-by-attribute 'CompilerGenerated'\n")),(0,a.kt)("h2",{id:"filters"},"Filters"),(0,a.kt)("p",null,"Dill4Net gives the ability to have fine-grained control over what gets excluded using ",(0,a.kt)("em",{parentName:"p"},"filter expressions"),".\nSyntax: ",(0,a.kt)("inlineCode",{parentName:"p"},"--exclude '[Assembly-Filter]Type-Filter'"),"\nWildcards"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"*"," - matches zero or more characters"),(0,a.kt)("li",{parentName:"ul"},"? - the prefixed character is optional")),(0,a.kt)("p",null,"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'--exclude "[*]*" - Excludes all types in all assemblies (nothing is instrumented)\n--exclude "[myapplication.*]MyApplication.Core.Coverage" - Excludes the Coverage class in the MyApplication.Core namespace belonging to any assembly that matches "myapplication.*" (e.g "myapplication.core")\n--exclude "[*]MyApplication.Core.Instrumentation.*" - Excludes all types belonging to MyApplication.Core.Instrumentation namespace in any assembly\n--exclude "[myapplication.*.tests?]*" - Excludes all types in any assembly starting with "myapplication." and ending with ".test" or ".tests" (the ? makes the "s" optional)\n--exclude "[myapplication.*]*" --exclude "[*]MyApplication.Core*" - Excludes assemblies matching "myapplication.*" and excludes all types belonging to the MyApplication.Core namespace in any assembly\n--exclude "[myapplication.core]MyApplication.Core.Coverage" - Excludes the Coverage class in the MyApplication.Core namespace belonging to "myapplication.core" assembly\n')))}p.isMDXComponent=!0}}]);