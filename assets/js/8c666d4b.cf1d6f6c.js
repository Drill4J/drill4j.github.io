(self.webpackChunkdrill4j_github_io=self.webpackChunkdrill4j_github_io||[]).push([[4610],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4966:function(e,t,n){"use strict";n.d(t,{r0:function(){return s},Ct:function(){return g},jL:function(){return f},Zb:function(){return d},u0:function(){return de},JO:function(){return u},Ee:function(){return w},kI:function(){return H},dl:function(){return G},HC:function(){return T},Wl:function(){return ce},E1:function(){return le},Nt:function(){return F},iA:function(){return O},v3:function(){return J}});var a,r,i,o=n(7294),l="additionalInformation_3spC",s=function(e){var t=e.children,n=e.className,a=void 0===n?"":n;return o.createElement("p",{className:l+" "+a},t)},c=n(4996),u=function(e){var t=e.src,n=e.width,a=void 0===n?16:n,r=e.height,i=void 0===r?16:r,l=e.className;return o.createElement("span",{className:l,style:{backgroundImage:"url("+(0,c.Z)(t)+")",minWidth:a+"px",minHeight:i+"px",display:"inline-block"}})},p="card_3fnR",d=function(e){var t=e.children,n=e.iconSrc,a=e.href;return o.createElement("a",{href:(0,c.Z)(a),className:p,rel:"noreferrer"},o.createElement(u,{src:n,width:48,height:48}),o.createElement("span",null,t))},m=n(2122),h=n(9756),g=function(e){var t=e.color,n=void 0===t?"#687481":t,a=e.children,r=(0,h.Z)(e,["color","children"]);return o.createElement("span",(0,m.Z)({className:"inline-block px-2 text-14 leading-24 bg-monochrome-light-tint rounded-lg",style:{color:n}},r),a)},f=function(e){var t=e.backgroundSrc,n=e.children,a=(0,h.Z)(e,["backgroundSrc","children"]);return o.createElement("div",(0,m.Z)({className:"py-14 px-5 text-center bg-cover",style:{backgroundImage:"url("+(0,c.Z)(t)+")"}},a),n)},k=n(2879),b={color:"#a9a9a9",fontSize:"14px",marginBottom:"15px"},v={width:"400px",marginBottom:"10px"},w=function(e){var t=e.src,n=e.alt,a=(0,o.useState)(!1),r=a[0],i=a[1];return o.createElement("div",{style:{display:"flex",flexDirection:"column",alignItems:"center"}},o.createElement("img",{className:"cursor-pointer",src:(0,c.Z)(t),onClick:function(){return i(!0)},alt:n,style:v}),r&&o.createElement(k.Z,{mainSrc:(0,c.Z)(t),onCloseRequest:function(){return i(!1)},enableZoom:!1,imagePadding:48}),o.createElement("p",{style:b},n))},y=n(1839);function N(){return(N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function C(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var _,x=function(e){var t=e.title,n=e.titleId,l=C(e,["title","titleId"]);return o.createElement("svg",N({xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none","aria-labelledby":n},l),t?o.createElement("title",{id:n},t):null,a||(a=o.createElement("rect",{opacity:.8,width:24,height:24,rx:4,fill:"#687481"})),r||(r=o.createElement("path",{d:"M10.871 13.766l-.407.407-.982.982-1.184 1.184-1.027 1.027c-.166.165-.328.335-.498.497l-.007.007c-.167.167-.473.18-.637 0a.457.457 0 010-.636l.407-.407.982-.982 1.184-1.184 1.027-1.027c.166-.165.328-.335.498-.497l.007-.007c.167-.167.473-.18.637 0 .165.18.179.46 0 .636zm6.999-6.997l-.409.408-.976.976-1.187 1.188-1.022 1.021c-.167.168-.33.338-.5.5l-.008.008c-.167.167-.474.18-.639 0a.459.459 0 010-.639l.409-.408.976-.976 1.187-1.188 1.022-1.021c.167-.168.33-.338.5-.5l.008-.008c.167-.167.474-.18.639 0a.46.46 0 010 .639zm-7.636 4.102l-.407-.407-.982-.982L7.66 8.298 6.634 7.271c-.165-.166-.335-.328-.497-.498l-.007-.007c-.167-.167-.18-.473 0-.637a.457.457 0 01.636 0l.407.407.982.982L9.34 8.702l1.027 1.027c.165.166.335.328.497.498l.007.007c.167.167.18.473 0 .637a.457.457 0 01-.636 0zm6.997 7.001l-.408-.409-.976-.977-1.188-1.187-1.021-1.022c-.168-.168-.338-.33-.5-.5l-.008-.008c-.167-.168-.18-.475 0-.64a.459.459 0 01.639 0l.408.409.976.977 1.188 1.188 1.021 1.021c.168.168.338.33.5.501l.008.008c.167.167.18.474 0 .639a.462.462 0 01-.639 0z",fill:"#fff"})),i||(i=o.createElement("path",{d:"M6.953 13.477v4.046l-.476-.476h4.046c.25 0 .488.219.477.476a.484.484 0 01-.477.477H6.477A.483.483 0 016 17.523v-4.046c0-.25.22-.488.477-.477.259.011.476.21.476.477zM13.477 6h4.046c.258 0 .477.218.477.477v4.046c0 .25-.22.488-.477.477a.484.484 0 01-.476-.477V6.477l.476.476h-4.046c-.25 0-.488-.219-.477-.476A.485.485 0 0113.477 6zm-2.954.953H6.477l.476-.476v4.046c0 .25-.219.488-.476.477A.484.484 0 016 10.523V6.477C6 6.219 6.218 6 6.477 6h4.046c.25 0 .488.22.477.477a.485.485 0 01-.477.476zM18 13.477v4.046a.483.483 0 01-.477.477h-4.046c-.25 0-.488-.22-.477-.477a.484.484 0 01.477-.476h4.046l-.476.476v-4.046c0-.25.219-.488.476-.477.258.011.477.21.477.477z",fill:"#fff"})))};function E(){return(E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function I(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var R=function(e){var t=e.title,n=e.titleId,a=I(e,["title","titleId"]);return o.createElement("svg",E({width:36,height:36,viewBox:"0 0 36 36",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},a),t?o.createElement("title",{id:n},t):null,_||(_=o.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M9.71 25.264a1.003 1.003 0 00-.001 1.415.997.997 0 001.412.002l7.073-7.073 7.07 7.07c.39.39 1.024.391 1.415.001a.997.997 0 00.002-1.412l-7.073-7.073 7.07-7.07c.39-.39.391-1.024.001-1.415a.997.997 0 00-1.412-.002l-7.073 7.073-7.07-7.07a1.003 1.003 0 00-1.414 0 .997.997 0 00-.002 1.412l7.073 7.073-7.07 7.07z"})))},A="table_EoDL",j="customScroll_2cyn",P="expandedTable_1nfl",O=function(e){var t=e.columns,n=void 0===t?[]:t,a=e.children,r=(0,o.useState)(!1),i=r[0],l=r[1],s=(0,o.useState)(!1),c=s[0],u=s[1],p=(0,o.useRef)(null);return(0,y.Z)(i),(0,o.useEffect)((function(){var e=p&&p.current;var t=new ResizeObserver((function(){e&&u(e.offsetHeight-e.clientHeight>0)}));return t.observe(e),function(){t.disconnect(e)}}),[p]),(0,o.useLayoutEffect)((function(){if(p.current&&null!=n&&n.length){var e=p.current.children[0];e.style.tableLayout="fixed";var t=document.createElement("colgroup");null==n||n.forEach((function(e){var n=document.createElement("col");return n.width=e,n.span=1,t.appendChild(n),n})),e.prepend(t)}}),[]),o.createElement("div",{className:A+" relative mb-4"},c&&o.createElement("button",{className:"absolute top-2 right-2 z-10","aria-label":"open expanded table button",type:"button",onClick:function(){return l(!0)}},o.createElement(x,null)),o.createElement("div",{ref:p,className:j},a),c&&o.createElement("div",{className:"fixed inset-0 z-50 transition-all duration-300 "+(i?"opacity-100":"opacity-0 invisible")},o.createElement("div",{className:"relative z-10 flex items-center justify-end h-12 pr-7 bg-monochrome-black bg-opacity-90"},o.createElement("button",{type:"button","aria-label":"close expanded table button",className:"flex items-center justify-center w-9 h-9 text-monochrome-medium-tint hover:text-monochrome-white",onClick:function(){return l(!1)}},o.createElement(R,{className:"fill-current cursor-pointer"}))),o.createElement("div",{className:"absolute inset-0 bg-monochrome-black opacity-60",onClick:function(){return l(!1)}}),o.createElement("div",{className:P+" "+j},a)))},D="listItem_qKEr",S="listItem_content_1vAz",T=function(e){var t=e.children,n=e.number;return o.createElement("div",{className:D},o.createElement("div",null,n),o.createElement("div",{className:S},t))},G=function(){return o.createElement("div",{className:"flex flex-col items-center"},o.createElement("h3",{className:"text-center"},"We are using a RealWorld app examples:"),o.createElement("div",{className:"flex gap-x-6 mb-12 text-16 leading-20"},o.createElement("div",{className:"flex justify-center items-center gap-x-3 leading-20"},o.createElement("img",{style:{marginBottom:0},src:(0,c.Z)("img/spring-logo.svg"),alt:"spring-logo"}),o.createElement("span",{className:"flex flex-col"},"Backend:\xa0",o.createElement("a",{className:"leading-20",href:"https://github.com/gothinkster/spring-boot-realworld-example-app",target:"_blank",rel:"noreferrer noopener"},"Spring"))),o.createElement("div",{className:"flex justify-center items-center"},o.createElement("img",{style:{marginBottom:0},src:(0,c.Z)("img/plus.svg"),alt:"plus"})),o.createElement("div",{className:"flex justify-center items-center gap-x-3"},o.createElement("img",{style:{marginBottom:0},src:(0,c.Z)("img/angular-logo.svg"),alt:"angular-logo"}),o.createElement("span",{className:"flex flex-col leading-20"},"Frontend:\xa0",o.createElement("a",{className:"leading-20",href:"https://github.com/gothinkster/angular-realworld-example-app",target:"_blank",rel:"noreferrer noopener"},"Angular")))))},L=n(6010),q="wrapper_2S3f",J=function(e){var t=e.children;return o.createElement("div",{className:(0,L.Z)(q,"flex gap-x-3 py-4 px-4 mb-4","rounded-lg bg-orange-default bg-opacity-5","text-monochrome-default text-16 leading-24")},o.createElement(u,{src:"img/warning.svg",width:16,height:16,className:"mt-1 h-4 text-orange-default"}),o.createElement("div",null,t))},M="wrapper_1vbA",H=function(e){var t=e.children;return o.createElement("div",{className:(0,L.Z)(M,"flex gap-x-3 py-5 px-4 mb-4","rounded-lg bg-blue-default bg-opacity-5","text-monochrome-default text-16 leading-24")},o.createElement(u,{src:"img/info.svg",width:16,height:16,className:"mt-1 h-4 text-orange-default"}),o.createElement("div",null,t))},Z=n(5035),B="tableOfContents_1zbr",z="table-of-contents__link";function U(e){var t=e.toc,n=e.isChild;return t.length?o.createElement("ul",{className:n?"":"table-of-contents table-of-contents__left-border"},t.map((function(e){return o.createElement("li",{key:e.id},o.createElement("a",{href:"#"+e.id,className:z,dangerouslySetInnerHTML:{__html:e.value},title:e.value}),o.createElement(U,{isChild:!0,toc:e.children}))}))):null}function F(e){var t=e.toc;return(0,Z.Z)(z,"table-of-contents__link--active",100),o.createElement("div",{className:(0,L.Z)(B,"thin-scrollbar")},o.createElement(U,{toc:t}))}var W=n(3935),Y=n(2263),$=n(5977),K=n(6742),X=n(9105),V=n(6397),Q=n(7052),ee=n(6747),te=n(5613),ne=n(4973),ae=null;function re(e){var t=e.hit,n=e.children;return o.createElement(K.Z,{to:t.url},n)}function ie(e){var t=e.state,n=e.onClose,a=(0,V.Z)().generateSearchPageLink;return o.createElement(K.Z,{to:a(t.query),onClick:n},"See all ",t.context.nbHits," results")}function oe(e){var t,a,r=e.contextualSearch,i=e.closeDocsSidebar,l=(0,h.Z)(e,["contextualSearch","closeDocsSidebar"]),s=(0,Y.default)().siteMetadata,u=(0,te.Z)(),p=null!=(t=null==(a=l.searchParameters)?void 0:a.facetFilters)?t:[],d=r?[].concat(u,p):p,g=Object.assign({},l.searchParameters,{facetFilters:d}),f=(0,c.C)().withBaseUrl,k=(0,$.k6)(),b=(0,o.useRef)(null),v=(0,o.useRef)(null),w=(0,o.useState)(!1),y=w[0],N=w[1],C=(0,o.useState)(null),_=C[0],x=C[1],E=(0,o.useCallback)((function(){return ae?Promise.resolve():Promise.all([n.e(3763).then(n.bind(n,3763)),Promise.all([n.e(532),n.e(6945)]).then(n.bind(n,6945)),Promise.all([n.e(532),n.e(4628)]).then(n.bind(n,4628))]).then((function(e){var t=e[0].DocSearchModal;ae=t}))}),[]),I=(0,o.useCallback)((function(){E().then((function(){b.current=document.createElement("div"),document.body.insertBefore(b.current,document.body.firstChild),N(!0)}))}),[E,N]),R=(0,o.useCallback)((function(){i(),N(!1),b.current.remove()}),[N]),A=(0,o.useCallback)((function(e){E().then((function(){N(!0),x(e.key)}))}),[E,N,x]),j=(0,o.useRef)({navigate:function(e){var t=e.itemUrl;k.push(t)}}).current,P=(0,o.useRef)((function(e){return e.map((function(e){var t=document.createElement("a");return t.href=e.url,Object.assign({},e,{url:f(""+t.pathname+t.hash)})}))})).current,O=(0,o.useMemo)((function(){return function(e){return o.createElement(ie,(0,m.Z)({},e,{onClose:R}))}}),[R]),D=(0,o.useCallback)((function(e){return e.addAlgoliaAgent("docusaurus",s.docusaurusVersion),e}),[s.docusaurusVersion]);(0,Q.D)({isOpen:y,onOpen:I,onClose:R,onInput:A,searchButtonRef:v});var S=(0,ne.I)({id:"theme.SearchBar.label",message:"Search",description:"The ARIA label and placeholder for search button"});return o.createElement(o.Fragment,null,o.createElement(X.Z,null,o.createElement("link",{rel:"preconnect",href:"https://"+l.appId+"-dsn.algolia.net",crossOrigin:"anonymous"})),o.createElement(ee.a,{onTouchStart:E,onFocus:E,onMouseOver:E,onClick:I,ref:v,translations:{buttonText:S,buttonAriaLabel:S}}),y&&(0,W.createPortal)(o.createElement(ae,(0,m.Z)({onClose:R,initialScrollY:window.scrollY,initialQuery:_,navigator:j,transformItems:P,hitComponent:re,resultsFooterComponent:O,transformSearchClient:D},l,{searchParameters:g})),b.current))}var le=function(e){var t=e.closeDocsSidebar,n=(0,Y.default)().siteConfig;return o.createElement(oe,(0,m.Z)({},n.themeConfig.algolia,{closeDocsSidebar:t}))},se=n(3424);se.Z.initialize({startOnLoad:!0});var ce=function(e){var t=e.chart;return(0,o.useEffect)((function(){se.Z.contentLoaded()}),[]),o.createElement("div",{className:"mermaid"},t)},ue=n(7694),pe=n(4544),de=function(e){var t=e.language,n=e.children,a="string"==typeof n?n.trim():"";return o.createElement(pe.ZP,(0,m.Z)({},pe.lG,{theme:ue.Z,code:a,language:t}),(function(e){var t=e.className,n=e.style,a=e.tokens,r=e.getLineProps,i=e.getTokenProps;return o.createElement("pre",{className:t,style:n},a.map((function(e,t){return o.createElement("div",r({line:e,key:t}),e.map((function(e,t){return o.createElement("span",i({token:e,key:t}))})))})))}))}},4259:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=n(4966),l=n(2911),s={id:"github",title:"GitHub Integration"},c={unversionedId:"cicd-integration/github",id:"version-0.9.0/cicd-integration/github",isDocsHomePage:!1,title:"GitHub Integration",description:"Overview",source:"@site/versioned_docs/version-0.9.0/cicd-integration/github.mdx",sourceDirName:"cicd-integration",slug:"/cicd-integration/github",permalink:"/docs/cicd-integration/github",version:"0.9.0",frontMatter:{id:"github",title:"GitHub Integration"},sidebar:"version-0.9.0/docs",previous:{title:"API Tests",permalink:"/docs/tests-integration/api-tests"},next:{title:"GitLab Integration",permalink:"/docs/cicd-integration/gitlab"}},u=[{value:"Overview",id:"overview",children:[{value:"Report on Pull Requests",id:"report-on-pull-requests",children:[]},{value:"Report on branch push",id:"report-on-branch-push",children:[]}]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Steps for integration",id:"steps-for-integration",children:[]},{value:"Configure Drill4J CI/CD Integration plugin",id:"configure-drill4j-cicd-integration-plugin",children:[]},{value:"Modify build step to send Git metadata to Drill4J",id:"modify-build-step-to-send-git-metadata-to-drill4j",children:[{value:"Gradle",id:"gradle",children:[]},{value:"Maven",id:"maven",children:[]}]},{value:"Deploy the app with Drill4J Application Agent",id:"deploy-the-app-with-drill4j-application-agent",children:[{value:"Option 1 - app is launched with Maven or Gradle",id:"option-1---app-is-launched-with-maven-or-gradle",children:[]},{value:"Option 2 - application is launched as a standalone Java process",id:"option-2---application-is-launched-as-a-standalone-java-process",children:[]},{value:"Add DRILL_COMMIT_SHA to env variables",id:"add-drill_commit_sha-to-env-variables",children:[]}]},{value:"Run tests with Drill4J Test Agent",id:"run-tests-with-drill4j-test-agent",children:[]},{value:"Push initial data to Drill4J",id:"push-initial-data-to-drill4j",children:[]},{value:"Generate report on Pull Request",id:"generate-report-on-pull-request",children:[{value:"Gradle",id:"gradle-1",children:[]},{value:"Maven",id:"maven-1",children:[]},{value:"Confirm PR Report is Working",id:"confirm-pr-report-is-working",children:[]}]},{value:"Generate report on Branch push",id:"generate-report-on-branch-push",children:[{value:"Gradle",id:"gradle-2",children:[]},{value:"Maven",id:"maven-2",children:[]},{value:"Confirm its working",id:"confirm-its-working",children:[]}]},{value:"Examples",id:"examples",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"This guide explains how to modify GitHub Actions workflow file to enable Change Testing reports in ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests"},"Pull Requests")," and ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/storing-and-sharing-data-from-a-workflow#about-workflow-artifacts"},"workflow artifacts"),"."),(0,i.kt)("p",null,"This is a step-by-step instruction, make sure to fulfill ",(0,i.kt)("a",{parentName:"p",href:"#prerequisites"},"prerequisites")," and then follow ",(0,i.kt)("a",{parentName:"p",href:"#steps-for-integration"},"steps for integration")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Change Testing")," report highlights the number of ",(0,i.kt)("strong",{parentName:"p"},"new")," and ",(0,i.kt)("strong",{parentName:"p"},"modified")," methods detected by Drill4J, their coverage status, and identifies untested methods that may pose potential ",(0,i.kt)("strong",{parentName:"p"},"Risks"),"."),(0,i.kt)("h3",{id:"report-on-pull-requests"},"Report on Pull Requests"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Detects changes between the ",(0,i.kt)("strong",{parentName:"li"},"source")," and ",(0,i.kt)("strong",{parentName:"li"},"target")," branches by comparing the latest commit in the ",(0,i.kt)("strong",{parentName:"li"},"source")," branch with the ",(0,i.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-merge-base"},"merge base")," commit in the ",(0,i.kt)("strong",{parentName:"li"},"target")," branch."),(0,i.kt)("li",{parentName:"ol"},"Displays metrics on how thoroughly ",(0,i.kt)("strong",{parentName:"li"},"changes")," are tested."),(0,i.kt)("li",{parentName:"ol"},"Handy for ",(0,i.kt)("inlineCode",{parentName:"li"},"feature/*"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"fix/*")," branches and other shorter-lived branches"),(0,i.kt)("li",{parentName:"ol"},"Attached to ",(0,i.kt)("a",{parentName:"li",href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests"},"Pull Requests")," as comments")),(0,i.kt)(o.Ee,{alt:"GitHub Pull Request Report",src:"/img/0.9.0/github/github-pr-report.png",mdxType:"Image"}),(0,i.kt)("h3",{id:"report-on-branch-push"},"Report on branch push"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Identifies changes in a branch between the ",(0,i.kt)("strong",{parentName:"li"},"latest commit")," and the configured ",(0,i.kt)("strong",{parentName:"li"},"baseline commit"),". Generally, the ",(0,i.kt)("strong",{parentName:"li"},"baseline commit")," is a tagged commit that follows the ",(0,i.kt)("inlineCode",{parentName:"li"},"tagPattern")," defined in the ",(0,i.kt)("a",{parentName:"li",href:"#generate-report-on-branch-push"},"configuration file"),"."),(0,i.kt)("li",{parentName:"ol"},"Best used in long-living branches such as ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"development")),(0,i.kt)("li",{parentName:"ol"},"Attached to ",(0,i.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/storing-and-sharing-data-from-a-workflow#about-workflow-artifacts"},"artifacts")," of workflow triggered ",(0,i.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#push"},"on branch push event"))),(0,i.kt)(o.Ee,{alt:"GitHub Workflow Report",src:"/img/0.9.0/github/github-workflow-report.png",mdxType:"Image"}),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Familiarity with the ",(0,i.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/writing-workflows"},"GitHub Actions")),(0,i.kt)("li",{parentName:"ol"},"Familiarity with ",(0,i.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#creating-secrets-for-a-repository"},"GitHub secrets and variables")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"/docs/getting-started/local-deployment"},"Drill4J core services")," deployed.")),(0,i.kt)("h2",{id:"steps-for-integration"},"Steps for integration"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#configure-drill4j-cicd-integration-plugin"},"Configure Drill4J CI/CD Integration plugin")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#modify-build-step-to-send-git-metadata-to-drill4j"},"Configure build step")," to send Git metadata to Drill4J"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#deploy-the-app-with-drill4j-application-agent"},"Configure deployment step")," to enable Drill4J Application Agent"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#run-tests-with-drill4j-test-agent"},"Configure tests")," to enable Drill4J Test Agent"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#push-initial-data-to-drill4j"},"Push initial data to Drill4J")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#generate-report-on-pull-request"},"Generate Change Testing report on Pull request")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#generate-report-on-branch-push"},"Generate Change Testing report on branch push event"))),(0,i.kt)("h2",{id:"configure-drill4j-cicd-integration-plugin"},"Configure Drill4J CI/CD Integration plugin"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Follow ",(0,i.kt)("a",{parentName:"p",href:"/docs/cicd-integration/cicd-integration-plugin#adding-plugin"},"CI/CD Integration Plugin - Adding Plugin")," section to add plugin to your Maven or Gradle project.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate ",(0,i.kt)("a",{parentName:"p",href:"/docs/drill-services/drill-ui"},"API key using Drill4J UI"),". Save it to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions"},"GitHub secrets and variables")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"DRILL_API_KEY"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"DRILL_API_URL")," variable in ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#creating-secrets-for-a-repository"},"GitHub secrets and variables"),". Set its value to Drill4J Admin Backend service API address (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"https://drill4j.my-host.foo/api"),"). Remember to add ",(0,i.kt)("inlineCode",{parentName:"p"},"/api")," at the end")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic"},"a personal GitHub access token (classic)"),"."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Select ",(0,i.kt)("inlineCode",{parentName:"li"},"repo")," scope - that is necessary to post comments on Pull Requests. "),(0,i.kt)("li",{parentName:"ul"},"Save it to ",(0,i.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#creating-secrets-for-a-repository"},"GitHub secrets and variables")," with the name ",(0,i.kt)("inlineCode",{parentName:"li"},"DRILL_BOT_GITHUB_TOKEN"),". Reports will be posted in comments from the corresponding user"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Set the following environment variables to GitHub workflow file ",(0,i.kt)("inlineCode",{parentName:"p"},"env")," section:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"env:\n  DRILL_API_KEY: ${{ secrets.DRILL_API_KEY }}\n  DRILL_API_URL: ${{ vars.DRILL_API_URL }}\n  DRILL_BOT_GITHUB_TOKEN: ${{ secrets.DRILL_BOT_GITHUB_TOKEN }}\n")))),(0,i.kt)("h2",{id:"modify-build-step-to-send-git-metadata-to-drill4j"},"Modify build step to send Git metadata to Drill4J"),(0,i.kt)("p",null,"Modify build step to call ",(0,i.kt)("strong",{parentName:"p"},"send build info")," command. It submits commit hash, author, and branch associated with build to Drill4J. It is necessary to identify application build in the Drill4J reports and dashboards."),(0,i.kt)("h3",{id:"gradle"},"Gradle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          # Add this only for Pull Requests, see explanations below\n          ref: ${{ github.head_ref }}\n\n      - name: Setup Java\n        uses: actions/setup-java@v4\n        with:\n          # adjust for desired Java distribution and version\n          distribution: 'temurin'\n          java-version: 17\n\n      - name: Setup Gradle\n        uses: gradle/actions/setup-gradle@v4\n\n      # Your build step\n      - name: Build app\n        run: ./gradlew clean build\n  \n      # Execute command to send data to Drill4J\n      - name: Send build info to Drill4J\n        run: ./gradlew drillSendBuildInfo\n      \n")),(0,i.kt)("h3",{id:"maven"},"Maven"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          # Add this only for Pull Requests, see explanations below\n          ref: ${{ github.head_ref }}\n\n      - name: Setup Java\n        uses: actions/setup-java@v4\n        with:\n          # adjust for desired Java distribution and version\n          distribution: 'temurin'\n          java-version: 17\n\n      # Your build step\n      - name: Build app\n        run: mvn clean install\n  \n      # Execute command to send data to Drill4J\n      - name: Send build info to Drill4J\n        run: ./mvn drill:sendBuildInfo\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"github.head_ref")," property instructs ",(0,i.kt)("inlineCode",{parentName:"p"},"checkout@v4")," action to check out the last commit of the branch."),(0,i.kt)("p",{parentName:"blockquote"},"By default GitHub Pull Requests create ",(0,i.kt)("strong",{parentName:"p"},"local merge commit")," from target branch to the source branch. It exists only inside workflow environment and is never pushed to remote. That makes it impossible to map it to the rest of repo Git history. "),(0,i.kt)("p",{parentName:"blockquote"},"See GitHub documentation (",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs"},"#1")," and ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request"},"#2"),") and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/actions/checkout?tab=readme-ov-file#checkout-pull-request-head-commit-instead-of-merge-commit"},"checkout@v4 Readme")," for more info   ")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\ud83d\udea7 TODO: add link to Metabase dashboards to verify Git metadata is submitted and detailed reports are avaialble  \ud83d\udea7")),(0,i.kt)("h2",{id:"deploy-the-app-with-drill4j-application-agent"},"Deploy the app with Drill4J Application Agent"),(0,i.kt)("h3",{id:"option-1---app-is-launched-with-maven-or-gradle"},"Option 1 - app is launched with Maven or Gradle"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Setup Application Agent with using ",(0,i.kt)("a",{parentName:"p",href:"/docs/cicd-integration/cicd-integration-plugin#application-agent"},"CI/CD Integration Plugin - Application Agent")," section")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"DRILL_COMMIT_SHA")," env varible following ",(0,i.kt)("a",{parentName:"p",href:"#add-drill_commit_sha-to-env-variables"},"the instruction below")))),(0,i.kt)("h3",{id:"option-2---application-is-launched-as-a-standalone-java-process"},"Option 2 - application is launched as a standalone Java process"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"DRILL_APPLICATION_AGENT_URL")," to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#creating-secrets-for-a-repository"},"GitHub secrets and variables"),"."),(0,i.kt)("p",{parentName:"li"},"Set its value to URL of release's .zip file from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Drill4J/java-agent/releases"},"https://github.com/Drill4J/java-agent/releases")),(0,i.kt)("p",{parentName:"li"},"For example:"),(0,i.kt)("a",{href:"https://github.com/Drill4J/java-agent/releases/download/v"+l.Hl+"/agent-linuxX64-"+l.Hl+".zip\n"}," ","https://github.com/Drill4J/java-agent/releases/download/v"+l.Hl+"/agent-linuxX64-"+l.Hl+".zip"," "))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the following step to download agent files (above the app launch step):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"  - name: Download Drill4J Application Agent\n    run: |\n      # Download \n      curl -L ${{ vars.DRILL_APPLICATION_AGENT_URL }} -o agent.zip\n      # Prep folders\n      mkdir -p ./temp-agent-dir /agent\n      # Unzip\n      unzip agent.zip -d ./temp-agent-dir\n      # Move files to /agent folder\n      find temp-agent-dir -mindepth 2 -exec mv -t /agent/ {} +\n  \n  - name: Deploy the application\n    run: # your command to deploy application\n    env:\n      JAVA_TOOL_OPTIONS: -agentpath:/agent/libdrill_agent.so # libdrill_agent.so for linux, libdrill_agent.dylib for Mac, drill_agent.dll for Windows\n      # Set Application Agent parameters, see link to reference below\n      DRILL_APP_ID: # ...\n      DRILL_GROUP_ID: # ...\n      DRILL_PACKAGE_PREFIXES: # ...\n")),(0,i.kt)("p",{parentName:"li"},"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/agents/java-agent#agent-parameters-reference"},"Agent Parameters Reference")," for a full list of parameters")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"DRILL_COMMIT_SHA")," env varible following ",(0,i.kt)("a",{parentName:"p",href:"#add-drill_commit_sha-to-env-variables"},"the instruction below")))),(0,i.kt)("h3",{id:"add-drill_commit_sha-to-env-variables"},"Add DRILL_COMMIT_SHA to env variables"),(0,i.kt)("p",null,"  ",(0,i.kt)("strong",{parentName:"p"},"For Pull Request"),", set it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"github.event.pull_request.head.sha"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"  - name: Deploy the application\n    run: # your command to deploy application\n    env:\n      # ...\n      DRILL_COMMIT_SHA: ${{ github.event.pull_request.head.sha }}\n")),(0,i.kt)("p",null,"  ",(0,i.kt)("strong",{parentName:"p"},"For branch push")," event, set it to ",(0,i.kt)("inlineCode",{parentName:"p"},"github.sha"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"  - name: Deploy the application\n    run: # your command to deploy application\n    env:\n      # ...\n      DRILL_COMMIT_SHA: ${{ github.sha }}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\ud83d\udea7 TODO: add link to Metabase dashboards to verify classes and methods information is available  \ud83d\udea7")),(0,i.kt)("h2",{id:"run-tests-with-drill4j-test-agent"},"Run tests with Drill4J Test Agent"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Configure Maven or Gradle project to use ",(0,i.kt)("a",{parentName:"p",href:"/docs/cicd-integration/cicd-integration-plugin#test-agent"},"Test Agent"),"."),(0,i.kt)("p",{parentName:"li"},"Once configured, Test Agent is launched with tests tasks automatically.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make sure your tests are launched in GitHub Action workflow. Usually it looks something like this:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"  - name: Run tests\n    # Gradle\n    run: ./gradlew test\n    # or Maven\n    # run: ./mvn test\n")))),(0,i.kt)("h2",{id:"push-initial-data-to-drill4j"},"Push initial data to Drill4J"),(0,i.kt)("p",null,"By now, both the Application Agent and Test Agent should be configured."),(0,i.kt)("p",null,"As the name suggests, the Change Testing report identifies changes, so the first step is to push data to Drill4J to establish a baseline for future comparisons. Ideally, this should be an application version built from your primary branch. We'll call it ",(0,i.kt)("inlineCode",{parentName:"p"},"main"),", but the branch name doesn't matter \u2014 it could be ",(0,i.kt)("inlineCode",{parentName:"p"},"develop")," or any other long-living branch."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Push to the ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," branch to trigger the GitHub Action workflow to launch the application."),(0,i.kt)("li",{parentName:"ol"},"Wait for the workflow to complete."),(0,i.kt)("li",{parentName:"ol"},"Check Metabase to verify that information about the new application build is available.")),(0,i.kt)("h2",{id:"generate-report-on-pull-request"},"Generate report on Pull Request"),(0,i.kt)("p",null,"Next, you need to configure the command to generate reports on Pull Requests. These reports will include metrics for changes introduced only in the specific Pull Request, allowing you to verify that the changes are tested before merging."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Add an additional step to your workflow file using either the Gradle or Maven configuration provided."),(0,i.kt)("li",{parentName:"ol"},"Push the changes and follow ",(0,i.kt)("a",{parentName:"li",href:"#confirm-pr-report-is-working"},"the instructions")," to verify that the reports are being generated.")),(0,i.kt)("h3",{id:"gradle-1"},"Gradle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"jobs:\n  # ... all kinds of build and test jobs above ...\n  # Add this at the very end of workflow file\n  reportByPR:\n    if: github.event_name == 'pull_request'\n    needs: test  # ensures that tests are completed _before_ this step starts. Adjust name of test step according to your workflow file  # ensures that tests are completed _before_ this step starts. Adjust name of test step according to your workflow file \n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ github.head_ref }}\n          fetch-depth: 0  # required to fetch complete Git history. Report won't work correctly otherwise\n\n      - name: Setup Java\n        uses: actions/setup-java@v4\n        with:\n          # adjust for desired Java distribution and version\n          distribution: 'temurin'\n          java-version: 17\n      \n      - name: Setup Gradle\n        uses: gradle/actions/setup-gradle@v4\n\n      - name: Send Change Testing report\n        run: ./gradlew drillGithubPullRequestReport\n")),(0,i.kt)("h3",{id:"maven-1"},"Maven"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"jobs:\n  # ... all kinds of build and test jobs above ...\n  # Add this at the very end of workflow file\n  reportByPR:\n    if: github.event_name == 'pull_request'\n    needs: test  # ensures that tests are completed _before_ this step starts. Adjust name of test step according to your workflow file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ github.head_ref }}\n          fetch-depth: 0  # required to fetch complete Git history. Report won't work correctly otherwise\n\n      - name: Setup Java\n        uses: actions/setup-java@v4\n        with:\n          # adjust for desired Java distribution and version\n          distribution: 'temurin'\n          java-version: 17\n      \n      - name: Send Change Testing report\n        run: ./mvn drill:githubPullRequestReport\n")),(0,i.kt)("h3",{id:"confirm-pr-report-is-working"},"Confirm PR Report is Working"),(0,i.kt)("p",null,"Now it's time to create a new branch from the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," branch."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Checkout a new branch (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"feature/xyz"),")."),(0,i.kt)("li",{parentName:"ol"},"Make some changes to your application code."),(0,i.kt)("li",{parentName:"ol"},"Push the branch and open a Pull Request from ",(0,i.kt)("inlineCode",{parentName:"li"},"feature/xyz")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"main"),"."),(0,i.kt)("li",{parentName:"ol"},"Wait for the workflow to complete.")),(0,i.kt)("p",null,"The comments section of the Pull Request should include a new comment with the report."),(0,i.kt)(o.Ee,{alt:"GitHub Pull Request Report",src:"/img/0.9.0/github/github-pr-report.png",mdxType:"Image"}),(0,i.kt)("h2",{id:"generate-report-on-branch-push"},"Generate report on Branch push"),(0,i.kt)("p",null,"In addition to reports on Pull Requests, it\u2019s useful to have reports on individual branches. These reports are attached as workflow artifacts. To configure them:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"baseline")," section to CI/CD integration plugin configuration section:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Gradle")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'  drill {\n    groupId = "my-group"\n    appId= "my-app"\n    // ... and other agent parameters ...\n\n    // new section\n    baseline {\n        searchStrategy = "SEARCH_BY_TAG"\n\n        // Adjust to match your tag naming scheme\n        tagPattern = "v[0-9].[0-9].[0-9]*"\n    }\n  }\n')),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Maven")),(0,i.kt)(o.u0,{language:"xml",mdxType:"Codeblock"},"\n  <plugin>\n    <groupId>com.epam.drill.integration</groupId>\n    <artifactId>drill-maven-plugin</artifactId>\n    <version>"+l.ns+"</version>\n    <configuration>\n        <groupId>my-group</groupId>\n        <appId>my-application</appId>\n        \x3c!-- ... and other agent parameters ... --\x3e\n        \x3c!-- New section --\x3e\n        <baseline>\n            <searchStrategy>SEARCH_BY_TAG</searchStrategy>\n            \x3c!-- Adjust to match your tag naming scheme --\x3e\n            <tagPattern>v[0-9].[0-9].[0-9]*</tagPattern>\n        </baseline>\n    </configuration>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generateChangeTestingReport</goal>\n            </goals>\n        </execution>\n    </executions>\n  </plugin>\n")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add additional step to your GitHub workflow file:"))),(0,i.kt)("h3",{id:"gradle-2"},"Gradle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"jobs:\n  # ... all kinds of build and test jobs above ...\n  # Add this at the very end of workflow file\n  reportByBranch:\n    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'\n    needs: test  # ensures that tests are completed _before_ this step starts. Adjust name of test step according to your workflow file \n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout sources\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # required to fetch complete Git history. Report won't work correctly otherwise\n      \n      - name: Setup Java\n        uses: actions/setup-java@v4\n        with:\n          # adjust for desired Java distribution and version\n          distribution: 'temurin'\n          java-version: 17\n      \n      - name: Setup Gradle\n        uses: gradle/actions/setup-gradle@v4\n\n      - name: Generate Drill4J Change Testing Report\n        run: ./gradlew drillGenerateChangeTestingReport\n\n      - name: Attach report\n        uses: actions/upload-artifact@v4\n        with:\n          name: change-testing-report\n          path: ./build/drill-reports/drillReport.md\n")),(0,i.kt)("h3",{id:"maven-2"},"Maven"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"jobs:\n  # ... all kinds of build and test jobs above ...\n  # Add this at the very end of workflow file\n  reportByBranch:\n    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'\n    needs: test  # ensures that tests are completed _before_ this step starts. Adjust name of test step according to your workflow file \n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # required to fetch complete Git history. Report won't work correctly otherwise\n      \n      - name: Setup Java\n        uses: actions/setup-java@v4\n        with:\n          # adjust for desired Java distribution and version\n          distribution: 'temurin'\n          java-version: 17\n\n      - name: Generate Drill4J Change Testing Report\n        run: ./mvn drill:generateChangeTestingReport\n\n      - name: Attach report\n        uses: actions/upload-artifact@v4\n        with:\n          name: change-testing-report\n          path: ./target/drill-reports/drillReport.md\n")),(0,i.kt)("h3",{id:"confirm-its-working"},"Confirm its working"),(0,i.kt)("p",null,"Push some changes. Once workflow is complete, check the attachments for uploaded report:"),(0,i.kt)(o.Ee,{alt:"GitHub Workflow Report",src:"/img/0.9.0/github/github-workflow-report.png",mdxType:"Image"}),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\ud83d\udea7 TODO: cleanup example action yml file \ud83d\udea7")),(0,i.kt)("p",null,"You can see example GitHub Drill4J integration in a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Drill4J/realworld-spring-webflux"},"demo repository")," with the following ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Drill4J/realworld-spring-webflux/blob/main/.github/workflows/test.yml"},"GitHub Action")))}d.isMDXComponent=!0},2911:function(e){"use strict";e.exports=JSON.parse('{"Hl":"0.9.3","_2":"0.23.2","ns":"0.1.3","lv":"0.9.1","ui":"0.1.1","mR":"v18"}')}}]);